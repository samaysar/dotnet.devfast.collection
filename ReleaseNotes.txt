DevFast.Net.Collection 2.2.0

 1. New feature - in the namespace DevFast.Net.Collection.Abstractions.Concurrent.Hashed
 	A. added following method to IFastDictionary
		  i. IFastReadOnlyDictionary<TKey, TValue> ToReadOnly()
		 ii. IFastReadOnlyDictionary<TKey, TValue> ToReadOnlyAndClear()
	C. added following method to IFastReadOnlyDictionary:
		  i. void CopyTo(Span<KeyValuePair<TKey, TValue>>)
		 ii. int CountInPartition(int)
		iii. bool Contains(KeyValuePair<TKey, TValue>)

DevFast.Net.Collection 2.1.0

 1. New feature - in the namespace DevFast.Net.Collection.Abstractions.Concurrent.Hashed
 	A. new interface IFastReadOnlyDictionary is added
	B. IFastDictionary now inherit from IFastReadOnlyDictionary
	C. interface IFastReadOnlyDictionary declares:
		  i. int CountInPartition(int)
		 ii. IEnumerable<TKey> EnumerableOfKeysOnPartition(int)
		iii. IEnumerable<TValue> EnumerableOfValuesOnPartition(int)
		 iv. IEnumerable<KeyValuePair<TKey, TValue>> EnumerableOnPartition(int)
 2. New feature - in the namespace DevFast.Net.Collection.Implementations.Concurrent.Hashed
	A. FastDictionary fully implements IFastDictionary

DevFast.Net.Collection 2.0.0

 1. New feature - namespace DevFast.Net.Collection.Implementations.Concurrent.Hashed added, containing
 	A. Generic class FastDictionary implements IFastDictionary
 2. New feature - namespace DevFast.Net.Collection.Abstractions added, containing
 	A. Static class FixedValues - Holds constant values

DevFast.Net.Collection 1.0.0

 1. New feature - namespace DevFast.Net.Collection.Implementations.Heaps.AbstractBase added, containing
	A. Generic Abstract class BinaryHeap
	B. Generic Abstract class SizableBinaryHeap
 2. New feature - namespace DevFast.Net.Collection.Implementations.Heaps added, containing
	A. Generic class MinHeap extends SizableBinaryHeap
	B. Generic class MaxHeap extends SizableBinaryHeap
 3. New feature - namespace DevFast.Net.Collection.Implementations.ReSizing added, containing
	A. class FixedStepReSizing - strategy to increase collection capacity by constant size
	B. class MultipleReSizing - strategy to increase collection capacity by constant multiple
	C. class NoReSizing - strategy for avoiding collection resizing